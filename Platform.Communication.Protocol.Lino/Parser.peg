@namespace Platform.Communication.Protocol.Lino
@classname Parser
@using System.Linq
document <IList<Link>> = #{ state["Indentation"] = 0; } _ l:links eof { l.ToLinksList() }
links <IList<LinksGroup>> = list:line+ { list }
line <LinksGroup> = INDENTATION l:element { l }
element <LinksGroup> = e:anyLink INDENT l:links UNDENT { new LinksGroup(e, l) } / e:anyLink { new LinksGroup(e) }
identityOrLink <Link> = l:multiLineAnyLink { l } / i:identity { i }
anyLink <Link> = ml:multiLineAnyLink eol { ml } / sl:singleLineAnyLink { sl }
multiLineAnyLink <Link> = multiLinePointLink / multiLineValueLink / multiLineLink
singleLineAnyLink <Link> = fl:singleLineLink eol { fl } / pl:singleLinePointLink eol { pl } / vl:singleLineValueLink eol { vl }
multiLineValueAndWhitespace <Link> = value:identityOrLink _ { value }
multiLineValues <IList<Link>> = _ list:multiLineValueAndWhitespace+ { list }
singleLineValueAndWhitespace <Link> = value:identityOrLink __ { value }
singleLineValues <IList<Link>> = __ list:singleLineValueAndWhitespace+ { list }
singleLineLink <Link> = __ id:(identity) __ ":" v:singleLineValues { new Link(id, v) }
multiLineLink <Link> = "(" _ id:(identity) _ ":" v:multiLineValues ")" { new Link(id, v) }
singleLineValueLink <Link> = v:singleLineValues { new Link(v) }
multiLineValueLink <Link> = "(" v:multiLineValues ")" { new Link(v) }
pointLink <Link> = id:(identity) { new Link(id) }
singleLinePointLink<Link> = __ l:pointLink { l }
multiLinePointLink<Link> = "(" _ l:pointLink _ ")" { l }
identity <string> = "" [0-9a-zA-Zа-яёА-ЯЁ]+
INDENTATION = spaces:" "* &{ spaces.Count == state["Indentation"] }
INDENT = #{ state["Indentation"] += 4; }
UNDENT = #{ state["Indentation"] -= 4; }
eol = __ ("" [\r\n]+ / eof)
eof = !.
__ = [ \t]*
_ = [ \t\n\r]*