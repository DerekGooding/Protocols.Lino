@namespace Platform.Communication.Protocol.Lino
@using Platform.Collections.Segments
@classname Parser
@members
{
    private const string Indentation = "i";
    private int StartLocation = 0;
    private char[] Characters = null;
}
document <IList<Link>> = #{ state[Indentation] = 0; Characters = state.Subject.ToCharArray(); } _ l:links eof { l.ToLinksList() }
links <IList<LinksGroup>> = list:line+ { list }
line <LinksGroup> = INDENTATION l:element { l }
element <LinksGroup> = e:anyLink INDENT l:links UNDENT { new LinksGroup(e, l) } / e:anyLink { new LinksGroup(e) }
identityOrLink <Link> = l:multiLineAnyLink { l } / i:identity { i }
anyLink <Link> = ml:multiLineAnyLink eol { ml } / sl:singleLineAnyLink { sl }
multiLineAnyLink <Link> = multiLinePointLink / multiLineValueLink / multiLineLink
singleLineAnyLink <Link> = fl:singleLineLink eol { fl } / pl:singleLinePointLink eol { pl } / vl:singleLineValueLink eol { vl }
multiLineValueAndWhitespace <Link> = value:identityOrLink _ { value }
multiLineValues <IList<Link>> = _ list:multiLineValueAndWhitespace+ { list }
singleLineValueAndWhitespace <Link> = __ value:identityOrLink { value }
singleLineValues <IList<Link>> = list:singleLineValueAndWhitespace+ { list }
singleLineLink <Link> = __ id:(identity) __ ":" v:singleLineValues { new Link(id, v) }
multiLineLink <Link> = "(" _ id:(identity) _ ":" v:multiLineValues ")" { new Link(id, v) }
singleLineValueLink <Link> = v:singleLineValues { new Link(v) }
multiLineValueLink <Link> = "(" v:multiLineValues ")" { new Link(v) }
pointLink <Link> = id:(identity) { new Link(id) }
singleLinePointLink<Link> = __ l:pointLink { l }
multiLinePointLink<Link> = "(" _ l:pointLink _ ")" { l }
identity <CharSegment> = #{ StartLocation = state.Location; } referenceSymbol+ { new CharSegment(Characters, StartLocation, state.Location - StartLocation) }
INDENTATION = spaces:" "* &{ spaces.Count == state[Indentation] } { null }
INDENT = #{ state[Indentation] += 4; } { null }
UNDENT = #{ state[Indentation] -= 4; } { null }
eol = __ ("" [\r\n]+ / eof) { null }
eof = !. { null }
__ = [ \t]* { null }
_ = whiteSpaceSymbol* { null }
whiteSpaceSymbol = [ \t\n\r] { null }
referenceSymbol = [^ \t\n\r(:)] { null }